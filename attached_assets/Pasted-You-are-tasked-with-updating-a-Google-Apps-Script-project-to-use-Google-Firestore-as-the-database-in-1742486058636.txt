You are tasked with updating a Google Apps Script project to use Google Firestore as the database instead of Google Sheets. The current project is a web application named "Boetepot Heren 8" that manages fine data for a sports team (Heren 8). The existing code uses Google Sheets to store and manage fine data, but the goal is to transition to Google Firestore for improved scalability and robustness. Your job is to modify the server-side functions to interact with Firestore using its REST API, while ensuring all current features are preserved.

Current Project Overview:

The project is a Google Apps Script web application with the following components:

Server-Side Code (Google Apps Script):
doGet(): Serves the "index.html" file as a web app with a title and X-Frame options.
getTotaalBoetes(): Calculates the total amount of fines by summing values in the third column (amount) of the sheet, starting from the second row.
getRecentBoetesPublic(): Retrieves the 10 most recent fines from the sheet, returning player name, date (as a string), amount, and reason.
getPlayerTotals(): Aggregates the total fines per player based on unique player names in the first column.
getPlayerHistory(speler): Returns the fine history for a specific player, sorted by date in descending order.
getAllFines(): Retrieves all fines with player name, date (as a string), amount, reason, and row number, sorted by row in descending order (newest first).
addFine(speler, reden, bedrag): Adds a new fine to the sheet with the current date/time, player name, reason, and amount.
deleteFine(row): Deletes a specific row from the sheet based on the row number.
getDropdownOptions(): Returns a list of unique player names from the first column for dropdown menus.
Client-Side Code (HTML/JavaScript):
HTML Structure:
Header: Displays the title "Boetepot Heren 8" and a theme toggle button (light/dark mode).
Total Fines Counter: Shows the total fines with an animated count-up effect, loaded via loadTotaalBoetes().
Player History Section: Includes a dropdown to select a player and a button to load their fine history, plus a leaderboard of total fines per player.
Recent Fines Section: Displays the 10 most recent fines in a table.
Admin Panel: Allows adding new fines (player, amount, reason) and viewing/deleting all fines with a search feature; hidden until admin login.
Login Section: A simple form for admin login with a password field.
JavaScript Features:
Uses google.script.run to call server-side functions.
Animates the total fines counter using animateCounter().
Supports light/dark theme toggling.
Uses the Chosen library for enhanced dropdowns.
Includes loading spinners and toast notifications for user feedback.
Main Features:
Display the total fines with an animated counter.
Show the 10 most recent fines in a table.
Allow users to select a player and view their fine history.
Display a leaderboard of players based on total fines.
Provide an admin panel to:
Add new fines with player name, amount, and reason.
View all fines with search functionality.
Delete existing fines by row number.
Include a login system for admin access (currently a simple password check, assumed to be handled elsewhere in the script).
Assumptions for the Transition:

The Firestore database is already set up in a Google Cloud project with the project ID YOUR_PROJECT_ID (replace with your actual project ID).
A collection named "fines" exists in Firestore.
Each document in the "fines" collection has the following fields:
speler: string (player name)
datum: timestamp (date and time of the fine)
bedrag: number (amount of the fine)
reden: string (reason for the fine)
A function getAccessToken() is available and returns a valid access token for authenticating requests to the Firestore REST API.
The base URL for the Firestore REST API is const BASE_URL = 'https://firestore.googleapis.com/v1/projects/YOUR_PROJECT_ID/databases/(default)/documents'.
The number of fines is small enough (e.g., <1000) that fetching all documents for aggregation is acceptable without pagination.
Instructions:

Modify the server-side Google Apps Script functions below to use Firestore instead of Google Sheets. Use UrlFetchApp to make HTTP requests to the Firestore REST API, including the access token in the Authorization header as Bearer <token>. Ensure all current features are preserved, adapting data retrieval and modification to work with Firestore's document-based structure. Update getAllFines() to return document IDs instead of row numbers, as Firestore uses unique document IDs.

Server-Side Functions to Modify:
doGet()
Current: Returns an HTML output from "index.html".
Instruction: No change needed; keep this function as is since it handles the web app serving.
getTotaalBoetes()
Current: Sums the "bedrag" (amount) from the third column of the sheet, starting from row 2.
Instruction:
Make a GET request to {BASE_URL}/fines?pageSize=1000 to fetch all documents.
Parse the response, iterate through documents, and sum the fields.bedrag.doubleValue or fields.bedrag.integerValue.
Return the total as a number.
getRecentBoetesPublic()
Current: Retrieves the 10 most recent fines from the sheetâ€™s last rows.
Instruction:
Use a POST request to {BASE_URL}:runQuery with a structured query:
Select all fields from "fines".
Order by "datum" descending.
Limit to 10 documents.
Parse the response, extracting speler, datum (convert timestamp to string), bedrag, and reden from each document.
Return an array of objects: [{speler, datum, bedrag, reden}, ...].
getPlayerTotals()
Current: Aggregates total fines per player from the sheet.
Instruction:
Make a GET request to {BASE_URL}/fines?pageSize=1000 to fetch all documents.
Parse the response, group by speler, and sum bedrag for each player.
Return an array of objects: [{speler, totaal}, ...].
getPlayerHistory(speler)
Current: Returns fine history for a specific player, sorted by date descending.
Instruction:
Use a POST request to {BASE_URL}:runQuery with a structured query:
Select from "fines" where speler equals the input speler.
Order by "datum" descending.
Parse the response, extracting datum (as a string), bedrag, and reden.
Return an array of objects: [{datum, bedrag, reden}, ...].
getAllFines()
Current: Retrieves all fines with row numbers, sorted by row descending.
Instruction:
Use a POST request to {BASE_URL}:runQuery with a structured query:
Select all fields from "fines".
Order by "datum" descending.
Parse the response, extracting speler, datum (as a string), bedrag, reden, and the document ID (from document.name).
Return an array of objects: [{speler, datum, bedrag, reden, id}, ...].
addFine(speler, reden, bedrag)
Current: Appends a new row to the sheet with the current date/time.
Instruction:
Make a POST request to {BASE_URL}/fines with a JSON body:
Fields: {speler: {stringValue: speler}, datum: {timestampValue: new Date().toISOString()}, bedrag: {doubleValue: parseFloat(bedrag)}, reden: {stringValue: reden}}.
Return "Boete succesvol toegevoegd!" on success.
deleteFine(id)
Current: Deletes a row by row number.
Instruction:
Make a DELETE request to {BASE_URL}/fines/{id} where id is the document ID.
No return value needed.
getDropdownOptions()
Current: Returns unique player names from the first column.
Instruction:
Make a GET request to {BASE_URL}/fines?pageSize=1000 to fetch all documents.
Parse the response, extract unique speler values using a Set.
Return an object: {spelers: [uniquePlayerNames]}.
Additional Notes:
HTTP Requests:
Use UrlFetchApp.fetch(url, options) with:
headers: {Authorization: 'Bearer ' + getAccessToken()}.
method as "GET", "POST", or "DELETE" as appropriate.
contentType: 'application/json' and payload: JSON.stringify(body) for POST requests.
Data Handling:
Convert Firestore timestamps (datum.timestampValue) to JavaScript Date objects and then to strings using toString() or a similar format (e.g., toLocaleString('nl-NL')).
Handle bedrag as a number, parsing from doubleValue or integerValue in Firestore responses.
Client-Side Adjustments:
Update the admin panel in "index.html" to use document IDs instead of row numbers for deletion. For example, modify the table rendering and deleteFine() calls to pass the id field returned by getAllFines().
The rest of the client-side code should work with the updated server-side functions, as it relies on google.script.run.
Features to Preserve:
Total fines calculation and display with animation.
Recent fines list (10 entries).
Player history retrieval and display.
Leaderboard of player totals.
Admin panel functionality (add, view, search, delete fines).
Dropdown population with unique player names.
Admin login (assume unchanged unless specified).
Current Code:

javascript

Collapse

Wrap

Copy
function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
      .setTitle('Boetepot Heren 8')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function getTotaalBoetes() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var total = 0;
  for (var i = 1; i < data.length; i++) {
    var amount = parseFloat(data[i][2]);
    if (!isNaN(amount)) total += amount;
  }
  return total;
}

function getRecentBoetesPublic() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var fines = [];
  for (var i = data.length - 1; i > 0; i--) {
    var date = data[i][1];
    if (date) {
      fines.push({
        speler: data[i][0] || '',
        datum: date.toString(),
        bedrag: data[i][2] || '0.00',
        reden: data[i][3] || ''
      });
    }
  }
  return fines.slice(0, 10);
}

function getPlayerTotals() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var playerTotals = {};
  for (var i = 1; i < data.length; i++) {
    var player = data[i][0];
    var amount = parseFloat(data[i][2]) || 0;
    if (player) {
      if (playerTotals[player]) {
        playerTotals[player] += amount;
      } else {
        playerTotals[player] = amount;
      }
    }
  }
  return Object.keys(playerTotals).map(player => ({ speler: player, totaal: playerTotals[player] }));
}

function getPlayerHistory(speler) {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var history = [];
  for (var i = 1; i < data.length; i++) {
    if (data[i][0] === speler && data[i][1]) {
      history.push({
        datum: data[i][1].toString(),
        bedrag: data[i][2] || '0.00',
        reden: data[i][3] || ''
      });
    }
  }
  return history.sort((a, b) => new Date(b.datum) - new Date(a.datum));
}

function getAllFines() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var fines = [];
  for (var i = data.length - 1; i > 0; i--) {
    var date = data[i][1];
    if (date) {
      fines.push({
        speler: data[i][0] || '',
        datum: date.toString(),
        bedrag: data[i][2] || '0.00',
        reden: data[i][3] || '',
        row: i + 1
      });
    }
  }
  return fines;
}

function addFine(speler, reden, bedrag) {
  var sheet = SpreadsheetApp.getActiveSheet();
  var date = new Date().toLocaleString('nl-NL');
  sheet.appendRow([speler || '', date, parseFloat(bedrag) || 0, reden || '']);
  return "Boete succesvol toegevoegd!";
}

function deleteFine(row) {
  var sheet = SpreadsheetApp.getActiveSheet();
  sheet.deleteRow(row);
}

function getDropdownOptions() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var players = new Set();
  for (var i = 1; i < data.length; i++) {
    if (data[i][0]) players.add(data[i][0]);
  }
  return { spelers: Array.from(players) };
}
html

Preview

Collapse

Wrap

Copy
<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title>Boetepot Heren 8</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&family=Montserrat:wght@500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.min.css">
  <!-- Styles omitted for brevity; assume unchanged -->
</head>
<body>
  <div class="header">
    <h1>Boetepot Heren 8</h1>
    <button class="theme-toggle" onclick="toggleTheme()">
      <i id="theme-icon" class="fas fa-moon"></i>
    </button>
  </div>

  <div class="total-fine-counter">
    <div class="fine-card">
      <div class="fine-content">
        <small>Total Fines</small>
        <span id="totaalBoetes">0.00â‚¬</span>
      </div>
      <i class="fas fa-coins"></i>
    </div>
  </div>

  <div class="content">
    <div class="section" id="playerHistorySection">
      <h2>Speler historie</h2>
      <select id="playerInput" class="chosen-select" data-placeholder="Selecteer speler">
        <option value=""></option>
      </select>
      <button onclick="loadPlayerHistory()"><i class="fas fa-history"></i> Toon historie</button>
      <div class="table-wrapper" id="playerHistory"></div>
      <div id="playerTotal" style="margin-top: 10px;"></div>
      <div class="leaderboard" id="leaderboard">
        <h3>Leaderboard</h3>
        <div id="leaderboardTable">Loading leaderboard...</div>
      </div>
    </div>
    <div class="section" id="recentFinesSection">
      <h2>Recente boetes</h2>
      <div class="table-wrapper" id="recentBoetes">Loading...</div>
    </div>
    <div class="section" id="adminPanel" style="display: none;">
      <a href="#" class="back-link" onclick="logoutAdmin(); return false;">Terug naar overzicht</a>
      <h2>Admin Dashboard</h2>
      <div class="admin-form">
        <form id="addFineForm">
          <div class="form-group">
            <label for="playerAdminInput">Speler</label>
            <select id="playerAdminInput" class="admin-input chosen-select" data-placeholder="Selecteer speler"></select>
          </div>
          <div class="form-group">
            <label for="amount">Bedrag</label>
            <input type="number" id="amount" class="admin-input" step="0.01" required>
          </div>
          <div class="form-group">
            <label for="reasonAdminInput">Reden</label>
            <select id="reasonAdminInput" class="admin-input chosen-select" data-placeholder="Selecteer reden"></select>
          </div>
          <button type="submit">Boete toevoegen</button>
        </form>
        <div id="addFineMessage"></div>
      </div>
      <div class="admin-fines">
        <h3>Alle boetes</h3>
        <input type="text" id="fineSearch" placeholder="Zoek op speler of reden" style="margin-bottom: 15px;">
        <div class="table-wrapper" id="allFines">Loading...</div>
        <div id="pagination" class="pagination"></div>
      </div>
    </div>
    <div class="section" id="loginSection">
      <h2>Admin Login</h2>
      <form id="loginForm">
        <input type="password" id="password" placeholder="Wachtwoord" required>
        <button type="submit"><i class="fas fa-sign-in-alt"></i> Log in</button>
      </form>
      <div id="loginMessage"></div>
    </div>
  </div>

  <div id="toast" class="toast"></div>
  <div id="loadingSpinner">
    <div class="spinner"></div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.jquery.min.js"></script>
  <script>
    function animateCounter(element, start, end, duration) {
      let startTime = null;
      const step = (timestamp) => {
        if (!startTime) startTime = timestamp;
        const progress = timestamp - startTime;
        const current = Math.min(start + (progress / duration) * (end - start), end);
        element.innerText = current.toFixed(2) + "â‚¬";
        if (progress < duration) {
          requestAnimationFrame(step);
        }
      };
      requestAnimationFrame(step);
    }

    function loadTotaalBoetes() {
      toggleLoading(true);
      google.script.run.withSuccessHandler(function(total) {
        const counterElement = document.getElementById("totaalBoetes");
        animateCounter(counterElement, 0, total, 2000);
        toggleLoading(false);
      }).withFailureHandler(function(error) {
        showToast("Fout bij laden totaal boetes: " + error.message, true);
        toggleLoading(false);
      }).getTotaalBoetes();
    }

    function toggleTheme() {
      document.body.classList.toggle('dark');
      const icon = document.getElementById('theme-icon');
      icon.classList.toggle('fa-moon');
      icon.classList.toggle('fa-sun');
    }

    function toggleLoading(show) {
      document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
    }

    function showToast(message, isError) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.background = isError ? '#e53e3e' : '#48bb78';
      toast.style.display = 'block';
      setTimeout(() => toast.style.display = 'none', 3000);
    }

    function loadPlayerHistory() { /* Placeholder */ }
    function logoutAdmin() { /* Placeholder */ }

    $(document).ready(function() {
      $('.chosen-select').chosen();
      loadTotaalBoetes();
    });
  </script>
</body>
</html>